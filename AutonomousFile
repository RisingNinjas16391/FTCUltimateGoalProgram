/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import android.util.Log;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;

import java.util.List;

/**
 * This file illustrates the concept of driving a path based on encoder counts.
 * It uses the common Pushbot hardware class to define the drive on the robot.
 * The code is structured as a LinearOpMode
 *
 * The code REQUIRES that you DO have encoders on the wheels,
 *   otherwise you would use: PushbotAutoDriveByTime;
 *
 *  This code ALSO requires that the drive Motors have been configured such that a positive
 *  power command moves them forwards, and causes the encoders to count UP.
 *
 *   The desired path in this example is:
 *   - Drive forward for 48 inches
 *   - Spin right for 12 Inches
 *   - Drive Backwards for 24 inches
 *   - Stop and close the claw.
 *
 *  The code is written using a method called: encoderDrive(speed, leftInches, rightInches, timeoutS)
 *  that performs the actual movement.
 *  This methods assumes that each movement is relative to the last stopping place.
 *  There are other ways to perform encoder based moves, but this method is probably the simplest.
 *  This code uses the RUN_TO_POSITION mode to enable the Motor controllers to generate the run profile
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="Official Auto", group="Autonomus")
//@Disabled
public class GyroAutoExperientalV4 extends LinearOpMode {
    private static final String TFOD_MODEL_ASSET = "UltimateGoal.tflite";
    private static final String LABEL_FIRST_ELEMENT = "Quad";
    private static final String LABEL_SECOND_ELEMENT = "Single";
    String Element;

    /* Declare OpMode members. */
    HardwareMecanumReworked robot   = new HardwareMecanumReworked();   // Use a Pushbot's hardware
    private ElapsedTime     runtime = new ElapsedTime();

    int[] currentPos = {0, 0, 0, 0};

    private static final String VUFORIA_KEY =
            "AWdbNWH/////AAABmU59dFu3g0lCnaPyHiCQUKQqxHMDG1C7Op/URaB7VkGLS95G7" +
                    "OUQMIu8MNQMjMjMjY67Re/OUDUNWzPAG4zfQe/MV5lG8osn4z8TDcndGx0jWfGRxr5iivD+" +
                    "/RmdCg/857Cq8fZ63uP4ZCqre+Gigvg0jDM3161z7sYniu5oI8CoPajV5s1bYpmFWjXjatunS/3" +
                    "3XwDC5R4OiEFu/8S9vM3DLUsZsCUGthojS2KZxNDNNHnOkLWNI3oeZfdGpqBWBSQtMb4hnHZk3eiTH9" +
                    "fKMfps2BJCwpozyL8Ls50zDLs0TPFEvG4fkQiFwPZLFO2sZwUZxN8htRTPL2WdxGbS3kI7msBCIxzl4ozfuVZUykz3 ";

    private VuforiaLocalizer vuforia;

    /**
     * {@link #tfod} is the variable we will use to store our instance of the TensorFlow Object
     * Detection engine.
     */
    private TFObjectDetector tfod;

    @Override
    public void runOpMode() {
        telemetry.setAutoClear(false);
        telemetry.addLine("Status: Booting");
        telemetry.update();

        /*
         * Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */
        initVuforia();
        telemetry.addData("Vuforia initialized: ", true);
        telemetry.update();
        initTfod();
        telemetry.addData("Tensorflow initialized: ", true);
        telemetry.update();


        /**
         * Activate TensorFlow Object Detection before we wait for the start command.
         * Do it here so that the Camera Stream window will have the TensorFlow annotations visible.
         **/
        if (tfod != null) {
            tfod.activate();

            // The TensorFlow software will scale the input images from the camera to a lower resolution.
            // This can result in lower detection accuracy at longer distances (> 55cm or 22").
            // If your target is at distance greater than 50 cm (20") you can adjust the magnification value
            // to artificially zoom in to the center of image.  For best results, the "aspectRatio" argument
            // should be set to the value of the images used to create the TensorFlow Object Detection model
            // (typically 1.78 or 16/9).

            // Uncomment the following line if you want to adjust the magnification and/or the aspect ratio of the input images.
            //tfod.setZoom(2.5, 1.78);
        }
        robot.init(hardwareMap);
        telemetry.addData("Robot initialized: ", true);
        telemetry.update();
        //robot.claw.setPower(-.45);

        // Send telemetry message to signify robot waiting;

        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.driveTrain.toggleBrake(true);
        robot.trigger.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        robot.flywheel.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.trigger.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        robot.trigger.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        telemetry.addLine("Waiting for start");
        telemetry.update();
        telemetry.setAutoClear(true);


        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // Robot motion
        // FL, FR, RL, RR
        // Forwards  =   + - + -
        // Backwards =   - + - +
        // Pivot right = + + + +
        // Pivot left = - - - -
        // Claw - = close; + = open

        // BEGINNING OF AUTO
        // Start reving flywheel

        if (opModeIsActive()) {
            runtime.reset();
            while(opModeIsActive() && Element == null && (runtime.milliseconds() < 500)) { // was 1000
                if (tfod != null) {
                    // getUpdatedRecognitions() will return null if no new information is available since
                    // the last time that call was made.
                    List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                    if (updatedRecognitions != null) {
                        telemetry.addData("# Object Detected", updatedRecognitions.size());
                        // step through the list of recognitions and display boundary info.
                        for (Recognition recognition : updatedRecognitions) {
                            int i = 0;
                            Element = recognition.getLabel();
                            telemetry.addData(String.format("label (%d)", i), recognition.getLabel());
                            telemetry.addData(String.format("  left,top (%d)", i), "%.03f , %.03f",
                                    recognition.getLeft(), recognition.getTop());
                            telemetry.addData(String.format("  right,bottom (%d)", i), "%.03f , %.03f",
                                    recognition.getRight(), recognition.getBottom());
                        }
                        telemetry.update();
                    }
                }
            }
        }

        if (Element == "Quad" ) {

            robot.flywheel.setPower(0.70);
            sleep(200);

            //turn to shooting position
            driveIndividual(775,875,775,875,2000);
            sleep(2000);

            //shoot 3
            sniperTrip(0.72, 2300);

            // Turn towards 4 rings
            driveIndividual(515,-515,515,-515,1500);
            sleep(25);
            //drive to 4 ring.
            driveIndividual(800,800,800,800,1800);
            sleep(25);
            robot.flywheel.setPower(0.67);
            sleep(25);
            feeed();
            sleep(25);

            //turn to shoot another three
            driveIndividual(-630,630,-630,630,1500);
            sleep(25);
            driveIndividual(-400,-400,-400,-400,2000);
            sleep(25);
            driveIndividual(800,820,800,820,2000);
            sleep(25);

            //shoot another three
            sniperTrip(0.7, 3000);
            sleep(25);
            robot.flywheel.setPower(0);

            //turn and drive to far corner
            driveIndividual(410,-410,410,-410, 2000);
            sleep(25);
            driveIndividual(2800,2800,2800,2800, 4000);
            sleep(25);

            //drop wobble and park
            clawFix(0.4, 600);
            sleep(25);
            driveIndividualFaster(-2000,-1500,-2000,-1500, 5000);
            sleep(25);

//            driveIndividual(3050,3050,3050, 3050, 3500);
//
//            // release first wobble gol
//            clawFix(0.25, 900);
//            sleep(1000);
//            clawFix(-0.3,300);
//            driveIndividual(-500,-500,-500, -500,800);
//
//            //park
//            driveIndividual(-2000, -2000, -2000, -2000,3500);
//            sleep(50);
//            turnToAngle2(0,4000);
//            sleep(1000);


        } else if (Element == "Single") {

            // rev up
            robot.flywheel.setPower(0.60);

            // Drive to launch
            driveIndividualBigBoyzBigNoiseAllsworthMadeThis(1200, 4280, 4280, 1200, 4000);
            sleep(50);
            //turnToAngle3(0, 5000);
            //driveIndividual(30,0,0,30,1000);
            //sleep(40);
            shootSingle();
            sleep(40);
            driveIndividual(305,-305,-305,305,1000);
            sleep(50);
            shootSingle();
            sleep(40);
            driveIndividual(300,-300,-300,300,1000);
            sleep(50);
            shootSingle();
            sleep(40);
            // Shoot disks
            //shootTrip();
            robot.trigger.setPower(0);
            robot.flywheel.setPower(0);
            sleep(100);

            // Middle square
            driveIndividual(500,-500,500,-500,2000);
            sleep(50);
            driveIndividual(1680,1680,1680, 1680, 3000);
            sleep(50);

            // release first wobble goal
            clawFix(0.4, 800);
            sleep(50);
            clawFix(-0.3,300);
            sleep(50);
            driveIndividual(-600,-600,-600, -600,800);
            sleep(50);

            // turn around to get second wobble goal and down arm
            driveIndividual(-495, 495, -495, 495, 2000);
            sleep(50);


        } else {

            //rev up
            robot.flywheel.setPower(0.60);

            // Drive to launch
            driveIndividualBigBoyzBigNoiseAllsworthMadeThis(1200, 4280, 4280, 1200, 5000);
            sleep(25);
            //turnToAngle3(0, 5000);
            //driveIndividual(30,0,0,30,1000);
            //sleep(40);
            shootSingle();
            sleep(25);
            turnToAngle(0,1000);
            sleep(25);
            driveIndividual(310,-310,-310,310,1000);
            sleep(25);
            shootSingle();
            sleep(25);
            driveIndividual(300,-300,-300,300,1000);
            sleep(25);
            shootSingle();
            sleep(25);
            // Shoot disks
            //shootTrip();
            robot.trigger.setPower(0);
            robot.flywheel.setPower(0);
            sleep(25);
            turnToAngle(7,4000);

            sleep(25);
            driveIndividual(3500,-3500, -3500, 3500,3800);
            sleep(25);

            turnToAngle(-2,4000);
            sleep(25);

            // release first wobble gol
            clawFix(0.35, 600);
            sleep(25);
            clawFix(-0.3,400);
            sleep(25);

            //down arm
            armDown_Best(-1800,0.9);
            sleep(50);
            clawFix(0.4,300);
            sleep(50);

            // drive to second wobble goal
            driveIndividual(-1650, -1650, -1650, -1650, 3000);
            //downArmWhileDriving(-1540,-1540,-1540, -1540,2500, -1750, 0.9);
            sleep(25);

           // pick up second wobble goal
            armDown_Best(-2150,-0.7);
            sleep(25);
            clawFix(-0.3,600);
            sleep(25);

            armDown_Best(-1780, -0.5);
            sleep(25);
            turnToAngle(8,2000);
            sleep(25);
            driveIndividualFaster(1700,3600,1700,3600, 4000);
            sleep(25);
            driveIndividual(-150, -150, -150, -150, 800);
            sleep(25);

            //sleep(100);
            clawFix(0.35,1300);
            sleep(25);
            armDown_Best(-900, -0.9);
            sleep(25);
            driveIndividual(1100, -1100, 1100, -1100, 2500);
            sleep(25);
        }

        //encoderDrive(new int[]{700, -700, 700, -700}, 0.75, 2);


        // Step through each leg of the path,
        // Note: Reverse movement is obtained by setting a negative distance (not speed)

        sleep(1000);     // pause for servos to move

        telemetry.addData("Path", "Complete");
        telemetry.update();
    }


    public void driveNormal(int surge, int sway, int yaw, double speed, int time){
        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setPower(0);
        robot.driveTrain.autoDrive(surge, sway, yaw);
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();

        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < time)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            // Display it for the driver.
            telemetry.addLine("left")
                    .addData("forward", robot.driveTrain.frontLeft.getPower())
                    .addData("rear", robot.driveTrain.rearLeft.getPower())
                    .addData("target position front left", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("target position rear left", robot.driveTrain.rearLeft.getTargetPosition());
            telemetry.addLine("right")
                    .addData("forward", robot.driveTrain.frontRight.getPower())
                    .addData("rear", robot.driveTrain.rearRight.getPower())
                    .addData("target position rear right", robot.driveTrain.rearRight.getTargetPosition())
                    .addData("target position front right", robot.driveTrain.frontRight.getTargetPosition());
            telemetry.addData("Time Elapsed", runtime.milliseconds());
            telemetry.update();

            for (int i = 0; i < 4; i ++) {
                robot.driveTrain.driveGroup[i].setPower((Math.sin(Math.PI * (robot.driveTrain.driveGroup[i].getCurrentPosition() + (robot.driveTrain.driveGroup[i].getTargetPosition())/ 7) / (robot.driveTrain.driveGroup[i].getTargetPosition()))));

            }
        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.driveTrain.setPower(0);
    }


    public void downArmWhileDriving(int frontLeft, int frontRight, int rearLeft, int rearRight,
                                    double timeOut, int targetPosition, double power) {
        final double stallTorque = .4;

        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setPower(0);
        robot.driveTrain.driveGroup[0].setTargetPosition(-frontLeft);
        robot.driveTrain.driveGroup[1].setTargetPosition(-frontRight);
        robot.driveTrain.driveGroup[2].setTargetPosition(-rearLeft);
        robot.driveTrain.driveGroup[3].setTargetPosition(-rearRight);
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();

        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < timeOut)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            // Display it for the driver.
            telemetry.addLine("left")
                    .addData("forward", robot.driveTrain.frontLeft.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearLeft.getCurrentPosition());
            telemetry.addLine("right")
                    .addData("forward", robot.driveTrain.frontRight.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearRight.getCurrentPosition());
            telemetry.addData("Time Elapsed", runtime.milliseconds());
            telemetry.addLine("left target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());
            telemetry.addLine("right target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());

            for (int i = 0; i < 4; i ++) {
                if ( !opModeIsActive() || isStopRequested()) {
                    return;
                }
                double percentPath = (double) robot.driveTrain.driveGroup[i].getCurrentPosition() / (double) robot.driveTrain.driveGroup[i].getTargetPosition();
                double out = stallTorque + 1.95 * percentPath - 2.1 * Math.pow(percentPath, 2);
                robot.driveTrain.driveGroup[i].setPower(out);
                Log.i("TELEMETRY", String.format("Drive %d Encoder Ticks: %d", i, robot.driveTrain.driveGroup[i].getCurrentPosition()));
                robot.arm.setPower(0);
                robot.arm.setTargetPosition(targetPosition);
                robot.arm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                robot.arm.setPower(power);
                runtime.reset();
                while (opModeIsActive() && (runtime.milliseconds() < timeOut) && robot.arm.isBusy()) {
                    telemetry.addLine("arm")
                            .addData("Position", robot.arm.getCurrentPosition());
                    telemetry.update();
                }
                robot.arm.setPower(0);
            }
            telemetry.update();
        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Makes robot stop
        robot.driveTrain.setPower(0);

    }


    public void driveGyro(int surge, int sway, double angle, double speed, int time){
        robot.driveTrain.setPower(0);
         robot.driveTrain.driveGroup[0].setTargetPosition( robot.driveTrain.driveGroup[0].getCurrentPosition() - (surge - sway));
         robot.driveTrain.driveGroup[1].setTargetPosition( robot.driveTrain.driveGroup[1].getCurrentPosition() - (surge + sway));
         robot.driveTrain.driveGroup[2].setTargetPosition( robot.driveTrain.driveGroup[2].getCurrentPosition() - (surge + sway));
         robot.driveTrain.driveGroup[3].setTargetPosition( robot.driveTrain.driveGroup[3].getCurrentPosition() - (surge - sway));
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();
        
        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < time)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            // Display it for the driver.
            telemetry.addLine("left")
                    .addData("forward", robot.driveTrain.frontLeft.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearLeft.getCurrentPosition());
            telemetry.addLine("right")
                    .addData("forward", robot.driveTrain.frontRight.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearRight.getCurrentPosition());
            telemetry.addData("Time Elapsed", runtime.milliseconds());
            telemetry.update();

            Orientation angles = robot.imu.imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            double Heading = angles.firstAngle - angle / 360;
            double adjust = (1 - speed) * Heading / 2;

            robot.driveTrain.frontLeft.setPower(speed + adjust);
            robot.driveTrain.frontRight.setPower(speed - adjust);
            robot.driveTrain.rearLeft.setPower(speed);
            robot.driveTrain.rearRight.setPower(speed);
        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Makes robot stop
        robot.driveTrain.setPower(0);
    }


    public void shoot(double power, double revTime) {
        robot.flywheel.setPower(power);
        runtime.reset();
        while(opModeIsActive() && runtime.seconds() < revTime) {
            telemetry.addData("Flywheel", power);
            telemetry.update();
        }
        robot.trigger.setPower(0.7);
        runtime.reset();
        while(opModeIsActive() && runtime.milliseconds() < 400) {
            telemetry.addData("Flywheel", power);
            telemetry.addData("Time Elapsed", runtime.seconds());
            telemetry.update();
        }
        robot.trigger.setPower(0);
        //robot.flywheel.setPower(0.5);
    }

    public void shootSingle(){
        runtime.reset();
        robot.trigger.setTargetPosition(840);
        robot.trigger.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.trigger.setPower(.70);
        while (robot.trigger.getCurrentPosition() < 840 && runtime.milliseconds() < 1000 && robot.trigger.isBusy()) {
            telemetry.addData("Shooting",true);
        }
        robot.trigger.setPower(0);
        robot.trigger.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }

    public void shootTrip(){
        runtime.reset();
        robot.trigger.setTargetPosition(2480);
        robot.trigger.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.trigger.setPower(.70);
        while (robot.trigger.getCurrentPosition() < 2478 && runtime.milliseconds() < 3500 && robot.trigger.isBusy()) {
            telemetry.addData("Shooting",true);
        }
        robot.trigger.setPower(0);
    }

    public void sniperTrip(double power, int time) {
        runtime.reset();
        robot.trigger.setPower(power);
        robot.trigger.setTargetPosition(2478);
        while (runtime.milliseconds() < time && robot.trigger.getCurrentPosition() < 2478) {

            robot.trigger.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            telemetry.addData("Shooting",true);
        }
        robot.trigger.setPower(0);
        robot.trigger.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }

//    public void armDown(boolean up, int itime){
//        robot.arm.setTargetPosition(-2150);
//        robot.arm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
//        robot.arm.setPower(0.5);
//        runtime.reset();
//        while (opModeIsActive() && (runtime.milliseconds() < itime)
//                && (robot.arm.isBusy())) {
//            telemetry.addLine("arm")
//                    .addData("Position", robot.arm.getCurrentPosition());
//            telemetry.update();
//        }
//        robot.arm.setPower(0);
//        robot.arm.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
//    }

    public void armDown_dos(int targetPosition, double power, int timeOut) {
        robot.arm.setPower(0);
        robot.arm.setTargetPosition(targetPosition);
        robot.arm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.arm.setPower(power);
        runtime.reset();
        while (opModeIsActive() && (runtime.milliseconds() < timeOut) && robot.arm.isBusy()) {
            telemetry.addLine("arm")
                    .addData("Position", robot.arm.getCurrentPosition());
            telemetry.update();
        }
        robot.arm.setPower(0);
    }

    public void armDown_Best(int targetPosition, double power) {
        robot.arm.setPower(0);
        robot.arm.setTargetPosition(targetPosition);
        robot.arm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.arm.setPower(power);
    }

    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraName = hardwareMap.get(WebcamName.class, "Webcam 1");

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);

        // Loading trackables is not necessary for the TensorFlow Object Detection engine.
    }

    /**
     * Initialize the TensorFlow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minResultConfidence = 0.45f;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_FIRST_ELEMENT, LABEL_SECOND_ELEMENT);
    }

    public void clawFix(double power, int time) {
        runtime.reset();
        while (runtime.milliseconds() < time){
            robot.claw.setPower(power);
        }
    }

    public void turnToAngle(double angle, double timeOut) {
        double tolerance = .3;
        double heading = robot.lastAngles.firstAngle;
        runtime.reset();
        while (opModeIsActive() && !isStopRequested() && runtime.milliseconds() < timeOut && (heading < angle - tolerance || heading > angle + tolerance)) {
            robot.imu.getAngle();
            heading = robot.lastAngles.firstAngle;
            double speed = .45;
            if (heading < angle - tolerance){
                robot.driveTrain.driveMecanum(0,0, -speed);
            }
            else if (heading > angle + tolerance){
                robot.driveTrain.driveMecanum(0,0, speed);
            }
        }
        robot.driveTrain.setPower(0);
    }

    public void turnToAngle2(double angle, double timeOut) {
        double tolerance = .3;
        double heading = robot.lastAngles.firstAngle;
        runtime.reset();
        while (opModeIsActive() && !isStopRequested() && runtime.milliseconds() < timeOut && (heading < angle - tolerance || heading > angle + tolerance)) {
            robot.imu.getAngle();
            heading = robot.lastAngles.firstAngle;
            double speed = Math.abs(((heading-angle) / 35) + .2);
            if (heading < angle - tolerance){
                robot.driveTrain.driveMecanum(0,0, -speed);
                sleep(25);
            }
            else if (heading > angle + tolerance){
                robot.driveTrain.driveMecanum(0,0, speed);
                sleep(25);
            }
        }
        robot.driveTrain.setPower(0);
    }

    public void turnToAngle3(double angle, double timeOut){
        double tolerance = .3;
        double heading = robot.lastAngles.firstAngle;
        runtime.reset();
        while (opModeIsActive() && !isStopRequested() && runtime.milliseconds() < timeOut && (heading < angle - tolerance || heading > angle + tolerance)) {
            robot.imu.getAngle();
            heading = robot.lastAngles.firstAngle;
            double speed = Math.abs(((heading-angle)/3) + .1);
            if (heading < angle - tolerance){
                robot.driveTrain.driveMecanum(0,0, -speed);
                sleep(5);
            }
            else if (heading > angle + tolerance){
                robot.driveTrain.driveMecanum(0,0, speed);
                sleep(5);
            }
        }
        robot.driveTrain.setPower(0);
    }

    public void driveEase (int surge, int sway, int yaw, double timeOut) {
        final double stallTorque = .2;

        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setPower(0);
        robot.driveTrain.driveGroup[0].setTargetPosition( - (surge - sway));
        robot.driveTrain.driveGroup[1].setTargetPosition( - (surge + sway));
        robot.driveTrain.driveGroup[2].setTargetPosition( - (surge + sway));
        robot.driveTrain.driveGroup[3].setTargetPosition( - (surge - sway));
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();

        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < timeOut)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            // Display it for the driver.
            telemetry.addLine("left")
                    .addData("forward", robot.driveTrain.frontLeft.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearLeft.getCurrentPosition());
            telemetry.addLine("right")
                    .addData("forward", robot.driveTrain.frontRight.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearRight.getCurrentPosition());
            telemetry.addData("Time Elapsed", runtime.milliseconds());
            telemetry.addLine("left target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());
            telemetry.addLine("right target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());

            for (int i = 0; i < 4; i ++) {
                if ( !opModeIsActive() || isStopRequested()) {
                    return;
                }
                double percentPath = (double) robot.driveTrain.driveGroup[i].getCurrentPosition() / (double) robot.driveTrain.driveGroup[i].getTargetPosition();
                double out = stallTorque + 3.3 * percentPath - 3.4 * Math.pow(percentPath, 2);
                robot.driveTrain.driveGroup[i].setPower(out);
            }
            telemetry.update();

        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Makes robot stop
        robot.driveTrain.setPower(0);

    }

    public void driveIndividual (int frontLeft, int frontRight, int rearLeft, int rearRight, double timeOut) {
        final double stallTorque = .4;

        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setPower(0);
        robot.driveTrain.driveGroup[0].setTargetPosition(-frontLeft);
        robot.driveTrain.driveGroup[1].setTargetPosition(-frontRight);
        robot.driveTrain.driveGroup[2].setTargetPosition(-rearLeft);
        robot.driveTrain.driveGroup[3].setTargetPosition(-rearRight);
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();

        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < timeOut)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            // Display it for the driver.
            telemetry.addLine("left")
                    .addData("forward", robot.driveTrain.frontLeft.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearLeft.getCurrentPosition());
            telemetry.addLine("right")
                    .addData("forward", robot.driveTrain.frontRight.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearRight.getCurrentPosition());
            telemetry.addData("Time Elapsed", runtime.milliseconds());
            telemetry.addLine("left target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());
            telemetry.addLine("right target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());

            for (int i = 0; i < 4; i ++) {
                if ( !opModeIsActive() || isStopRequested()) {
                    return;
                }
                double percentPath = (double) robot.driveTrain.driveGroup[i].getCurrentPosition() / (double) robot.driveTrain.driveGroup[i].getTargetPosition();
                double out = stallTorque + 1.45 * percentPath - 1.7 * Math.pow(percentPath, 2);
                robot.driveTrain.driveGroup[i].setPower(out);
                Log.i("TELEMETRY", String.format("Drive %d Encoder Ticks: %d", i, robot.driveTrain.driveGroup[i].getCurrentPosition()));
            }
            telemetry.update();
        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Makes robot stop
        robot.driveTrain.setPower(0);

    }

    public void driveIndividualBigBoyzBigNoiseAllsworthMadeThis (int frontLeft, int frontRight, int rearLeft, int rearRight, double timeOut) {
        final double stallTorque = .3;

        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setPower(0);
        robot.driveTrain.driveGroup[0].setTargetPosition(-frontLeft);
        robot.driveTrain.driveGroup[1].setTargetPosition(-frontRight);
        robot.driveTrain.driveGroup[2].setTargetPosition(-rearLeft);
        robot.driveTrain.driveGroup[3].setTargetPosition(-rearRight);
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();

        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < timeOut)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            for (int i = 0; i < 4; i ++) {
                if ( !opModeIsActive() || isStopRequested()) {
                    return;
                }
                double percentPath = (double) robot.driveTrain.driveGroup[i].getCurrentPosition() / (double) robot.driveTrain.driveGroup[i].getTargetPosition();
                double out = stallTorque + 1.6 * percentPath - 1.8 * Math.pow(percentPath, 2);
                robot.driveTrain.driveGroup[i].setPower(out);

            if((robot.driveTrain.frontLeft.getCurrentPosition() < robot.driveTrain.frontRight.getCurrentPosition())&&
                    ((robot.driveTrain.rearRight.getCurrentPosition() < robot.driveTrain.rearLeft.getCurrentPosition()))) {
                robot.driveTrain.frontLeft.setPower(0.05);
                robot.driveTrain.rearRight.setPower(0.05);
            }
            }
        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Makes robot stop
        robot.driveTrain.setPower(0);

    }

    public void driveIndividualFaster (int frontLeft, int frontRight, int rearLeft, int rearRight, double timeOut) {
        final double stallTorque = .4;

        robot.driveTrain.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.driveTrain.setPower(0);
        robot.driveTrain.driveGroup[0].setTargetPosition(-frontLeft);
        robot.driveTrain.driveGroup[1].setTargetPosition(-frontRight);
        robot.driveTrain.driveGroup[2].setTargetPosition(-rearLeft);
        robot.driveTrain.driveGroup[3].setTargetPosition(-rearRight);
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        robot.driveTrain.toggleBrake(true);
        runtime.reset();

        while (opModeIsActive() && !isStopRequested() && (runtime.milliseconds() < timeOut)
                && (robot.driveTrain.frontRight.isBusy() || robot.driveTrain.frontLeft.isBusy()
                || robot.driveTrain.rearLeft.isBusy() || robot.driveTrain.rearLeft.isBusy())) {

            if ( !opModeIsActive() || isStopRequested()) {
                return;
            }

            // Display it for the driver.
            telemetry.addLine("left")
                    .addData("forward", robot.driveTrain.frontLeft.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearLeft.getCurrentPosition());
            telemetry.addLine("right")
                    .addData("forward", robot.driveTrain.frontRight.getCurrentPosition())
                    .addData("rear", robot.driveTrain.rearRight.getCurrentPosition());
            telemetry.addData("Time Elapsed", runtime.milliseconds());
            telemetry.addLine("left target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());
            telemetry.addLine("right target")
                    .addData("forward target", robot.driveTrain.frontLeft.getTargetPosition())
                    .addData("rear target", robot.driveTrain.rearLeft.getTargetPosition());

            for (int i = 0; i < 4; i ++) {
                if ( !opModeIsActive() || isStopRequested()) {
                    return;
                }
                double percentPath = (double) robot.driveTrain.driveGroup[i].getCurrentPosition() / (double) robot.driveTrain.driveGroup[i].getTargetPosition();
                double out = stallTorque + 1.95 * percentPath - 2.1 * Math.pow(percentPath, 2);
                robot.driveTrain.driveGroup[i].setPower(out);
                Log.i("TELEMETRY", String.format("Drive %d Encoder Ticks: %d", i, robot.driveTrain.driveGroup[i].getCurrentPosition()));
            }
            telemetry.update();
        }

        // Stop all motion;
        robot.driveTrain.toggleBrake(true);

        // Turn off RUN_TO_POSITION
        robot.driveTrain.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Makes robot stop
        robot.driveTrain.setPower(0);

    }

    public void feeed() {
        final int interval = 3;
        robot.intake.setPower(-0.95);
        sleep(100);
        for (int i = 0; i < interval; i ++) {
            driveIndividual(200, 0, 200, 0, 300);
            driveIndividual(0, 200, 0, 200, 300);
        }
        sleep(2300);
        robot.intake.setPower(0);
    }
}
